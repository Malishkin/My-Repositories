'use strict';

const btn = document.querySelector('.btn-country');
const countriesContainer = document.querySelector('.countries');

//////////////////////////////////////////////////////

const getCountryAndBourderCountries = function (country) {
  const request = new XMLHttpRequest();
  request.open('GET', `https://restcountries.com/v3.1/name/${country}`);

  request.send();

  request.addEventListener('load', function () {
    const [data] = JSON.parse(this.responseText);
    console.log(data);
    //–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
    displayCountry(data);
    //–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –≥—Ä–∞–Ω–∏—á–∞—â–µ–π —Å—Ç—Ä–∞–Ω—ã
    const [firstNeighbour] = data.borders;
    if (!firstNeighbour) return;
    // –≤—ã–∑–æ–≤ AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–≤–æ–π —Å–æ—Å–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–µ
    const request2 = new XMLHttpRequest();

    request2.open(
      'GET',
      `https://restcountries.com/v3.1/alpha/${firstNeighbour}`
    );
    request2.send();
    request2.addEventListener('load', function () {
      const [data2] = JSON.parse(this.responseText);
      console.log(data2);
      displayCountry(data2, 'neighbour');
    });
  });
};

const displayCountry = function (data, className = '') {
  const currencies = Object.values(data.currencies)
    .map(currency => `${currency.name} (${currency.symbol})`)
    .join(', ');

  const languages = Object.values(data.languages).join(', ');

  const html = `
      <article class="country ${className}">
        <img class="country__img" src="${data.flags.svg}" />
        <div class="country__data">
          <h3 class="country__name">${data.name.common}</h3>
          <h4 class="country__region">${data.region}</h4>
          <p class="country__row"><span>üë´</span>${(
            +data.population / 1000000
          ).toFixed(1)} million</p>
          <p class="country__row"><span>üó£Ô∏è</span>${languages}</p>
          <p class="country__row"><span>üí∞</span>${currencies}</p>
        </div>
      </article>
    `;
  countriesContainer.insertAdjacentHTML('beforeend', html);
  //   countriesContainer.style.opacity = 1;
};

const displayError = function (err) {
  countriesContainer.insertAdjacentText('beforeend', err);
  //   countriesContainer.style.opacity = 1;
};

const getDataAndConvertToJSON = function (
  url,
  errorMessage = 'Something went wrong üí•üí•'
) {
  return fetch(url).then(response => {
    if (!response.ok)
      throw new Error(`${errorMessage}, error ${response.status}`);
    return response.json();
  });
};

// const getCountryData = function (country) {
//   fetch(`https://restcountries.com/v3.1/name/${country}`)
//     .then(response => {
//       console.log(response);
//       if (!response.ok)
//         throw new Error(`Country not found, error ${response.status}`);
//       return response.json();
//     })
//     .then(data => {
//       displayCountry(data[0]);
//       const neighbour = data[0].borders[0];
//       if (!neighbour) return;

//       // Modify the fetch URL to correct API version
//       return fetch(`https://restcountries.com/v3.1/alpha/${neighbour}`);
//     })
//     .then(response => {
//       if (!response.ok)
//         throw new Error(`Country not found, error ${response.status}`);
//       return response.json();
//     })
//     .then(data => {
//       if (data) displayCountry(data[0], 'neighbour');
//     })
//     .catch(err => {
//       console.error(`${err} üí•üí•üí•`);
//       displayError(`Something went wrong üí•üí• ${err.message}. Try again!`);
//     })
//     .finally(() => {
//       countriesContainer.style.opacity = 1;
//     });
// };

const getCountryData = function (country) {
  getDataAndConvertToJSON(
    `https://restcountries.com/v3.1/name/${country}`,
    'Country not found'
  )
    .then(data => {
      displayCountry(data[0]);
      if (!data[0].borders) throw new Error('No neighbour found!');

      const neighbour = data[0].borders[0];

      // Modify the fetch URL to correct API version
      return getDataAndConvertToJSON(
        `https://restcountries.com/v3.1/alpha/${neighbour}`,
        'Country not found'
      );
    })
    .then(data => displayCountry(data[0], 'neighbour'))
    .catch(err => {
      console.error(`${err} üí•üí•üí•`);
      displayError(`Something went wrong üí•üí• ${err.message} Try again!`);
    })
    .finally(() => {
      countriesContainer.style.opacity = 1;
    });
};
// btn.addEventListener('click', function () {
//   getCountryData('greenland');
// });

// –í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤—ã —Å–æ–∑–¥–∞–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é displayCountryByGPS(), –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç GPS. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ç–æ—Ä—ã–µ API –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ò—Ç–∞–∫, –≤ —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤—ã –≤—ã –≤–ø–µ—Ä–≤—ã–µ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.

// 1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é displayCountryByGPS(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ —à–∏—Ä–æ—Ç—ã (lat) –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–≥–æ—Ç—ã (lng) (—ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã GPS, –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∏–∂–µ).
// 2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ ¬´–æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Ç–∞–∫–æ–µ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å—Ç—Ä–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç API –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:
// https://geocode.xyz/api
// –í—ã–∑–æ–≤ AJAX –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–ª—è URL –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
// https://geocode.xyz/52.508,13.381?geoit=json
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Fetch API –∏ promises, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –Ω–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏—é getDataAndConvertToJSON()!
// 3. –ü–æ–ª—É—á–∏–≤ –¥–∞–Ω–Ω—ã–µ, –≤—ã–≤–µ–¥–∏—Ç–µ –∏—Ö –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–± —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏. –ó–∞—Ç–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ, –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞: ‚ÄúYou are in Rome, Italy‚Äù.
// 4. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Ü–µ —Ü–µ–ø–æ—á–∫–∏ promises –º–µ—Ç–æ–¥ catch() –∏ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö –≤ –∫–æ–Ω—Å–æ–ª—å.
// 5. –≠—Ç–∏ API –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É. –ï—Å–ª–∏ –≤—ã –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—à–∏–±–∫—É —Å –∫–æ–¥–æ–º 403. –≠—Ç–æ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ fetch() –Ω–µ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç promise. –ü–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞–π—Ç–µ –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å promise —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ, –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø–æ —Å–º—ã—Å–ª—É.
// 6. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ API –æ —Å—Ç—Ä–∞–Ω–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏.
// 7. –û—Ç–æ–±—Ä–∞–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏, –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–π –ª–µ–∫—Ü–∏–∏ (–≤—ã –¥–∞–∂–µ –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–¥, –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ).

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:

// –®–∏—Ä–æ—Ç–∞
// –î–æ–ª–≥–æ—Ç–∞
// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 1
// 35.756
// 139.256
// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 2
// 48.857
// 2.358
// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 3
// 40.708
// -74.051

function displayCountryByGPS(lat, lng) {
  const geocodeApi = `https://geocode.xyz/${lat},${lng}?geoit=json`;

  fetch(geocodeApi)
    .then(response => {
      if (!response.ok) {
        if (response.status === 403) {
          throw new Error(
            '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.'
          );
        }
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏.');
      }
      return response.json();
    })
    .then(data => {
      console.log(data);
      const city = data.city;
      const country = data.country;
      console.log(`You are in ${city}, ${country}`);
    })
    .catch(error => console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error.message));
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
displayCountryByGPS(35.756, 139.256);
displayCountryByGPS(48.857, 2.358);
displayCountryByGPS(40.708, -74.051);
